# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  sonarcloud: sonarsource/sonarcloud@1.1.0

executors:
  my-executor:
    docker:
      - image: cimg/node:lts
    working_directory: ~/project

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    parameters:
      version:
        type: string
    executor: my-executor
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
      - run:
          name: configure docker
          command: |
            ssh remote-docker \<<EOF
              sudo bash -c 'echo "{\"experimental\": true}" > /etc/docker/daemon.json'
              sudo systemctl restart docker
            EOF
      - run:
          name: build docker image
          command: |
            # Configure Git User
            git config user.email cicd@toorakcapital.com”
            git config user.name toorak-bot
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            export SSH_PRIVATE_KEY="$(cat ~/.ssh/id_rsa)"

            # Build Docker Image
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            echo Building the Docker image for $PACKAGE_NAME@$PACKAGE_VERSION
            #ssh -i ~/.ssh/id_rsa_366ba90435324229be507319f9961b44 -T git@github.com
            docker build --squash --no-cache --build-arg SSH_PRIVATE_KEY="$SSH_PRIVATE_KEY" --build-arg VERSION=<< parameters.version >> -t $PACKAGE_NAME:$PACKAGE_VERSION .
            if [ "<< parameters.version >>" != "current" ]
            then
              docker save -o img.tar "$PACKAGE_NAME:$PACKAGE_VERSION"
            fi
      - when:
          condition:
            matches: { pattern: "^master$", value: << pipeline.git.branch >> }
          steps:
            - persist_to_workspace:
                # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
                # taken to be the root directory of the workspace.
                root: ~/project
                # Must be relative path from root
                paths:
                  - .
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  sonar-scan:
    executor: my-executor
    steps:
      - checkout
      - run:
          name: run code coverage
          command: |
            # Run Code coverage
            npm ci
            npm test
      - sonarcloud/scan

  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  patch-and-deploy:
    parameters:
      version:
        type: string
    executor: my-executor
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      # - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ./
      - run:
          name: patch package and deploy docker image
          command: |
            # Install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Login to AWS Docker Image Repo
            aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com
            
            # Configure Git User
            git config user.email cicd@toorakcapital.com”
            git config user.name toorak-bot
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

            # Install Dev Dependencies
            npm install --only=dev

            # Release Application
            ORIGINAL_VERSION=$(node -p "require('./package.json').version")
            npm run semantic-release
            PACKAGE_VERSION=$(node -p "require('./package.json').version")
            PACKAGE_NAME=$(node -p "require('./package.json').name")
            echo Pushing the Docker image to ECR.
            docker load -i img.tar
            git reset HEAD --hard
            if [ "$ORIGINAL_VERSION" != "$PACKAGE_VERSION" ]
            then
              docker tag $PACKAGE_NAME:$ORIGINAL_VERSION $PACKAGE_NAME:$PACKAGE_VERSION
            fi
            docker tag $PACKAGE_NAME:$PACKAGE_VERSION $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$PACKAGE_NAME-tl-ue1-ecr:dev-$PACKAGE_VERSION
            #docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$PACKAGE_NAME-tl-ue1-ecr:dev-$PACKAGE_VERSION
            echo "updating package version"
            npm version patch -m "%s [skip ci]"
            echo pushing new package version
            git push origin HEAD:master

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  main:
    # TODO: Change "17" to "lts" when node 18 becomes the lts version
    jobs:
      - sonar-scan:
          name: 'sonar-scan'
      - build-and-test:
          name: build-and-test-node-current
          version: current
      - build-and-test:
          name: 'build-and-test-node-17'
          version: '17'
      - approval:
          type: approval # requires that an in-app button be clicked by an appropriate member of the project to continue.
          requires:
            - 'build-and-test-node-17'
          filters:
            branches:
              only: /^master$/
      - patch-and-deploy:
          version: '17'
          requires:
            - approval
